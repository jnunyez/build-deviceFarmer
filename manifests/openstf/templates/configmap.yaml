apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ template "fullname" . }}-common-environment-variables"
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
data:
  ZMQ_TCP_KEEPALIVE: "1"
  ZMQ_TCP_KEEPALIVE_IDLE: "60"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ template "fullname" . }}-nginx-config"
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
data:
  nginx.conf: |
    worker_processes {{ .Values.nginx.resources.limits.cpu }};
    events {
      worker_connections 1024;
    }

    http {
      default_type        application/octet-stream;

      upstream stf_app {
        server {{ template "fullname" . }}-app:3100 max_fails=3;
      }

      upstream stf_auth {
        server {{ template "fullname" . }}-auth:3200 max_fails=3;
      }

      upstream stf_storage_apk {
        server {{ template "fullname" . }}-apk-storage:3300 max_fails=3;
      }

      upstream stf_storage_image {
        server {{ template "fullname" . }}-img-storage:3400 max_fails=3;
      }

      upstream stf_storage {
        server {{ template "fullname" . }}-storage:3500 max_fails=3;
      }

      upstream stf_websocket {
        server {{ template "fullname" . }}-websocket:3600 max_fails=3;
      }

      upstream stf_api {
        server {{ template "fullname" . }}-api:3700 max_fails=3;
      }

      types {
        application/javascript  js;
        image/gif               gif;
        image/jpeg              jpg;
        text/css                css;
        text/html               html;
      }

      map $http_upgrade $connection_upgrade {
        default  upgrade;
        ''       close;
      }

      server {
        listen       80 default_server;
        listen       [::]:80 default_server;
        server_name  {{ .Values.ingress.hostname }};
        keepalive_timeout 70;
        root         /dev/null;

        resolver 10.96.0.10 valid=300s;
        resolver_timeout 10s;

        # Provider
        location ~ "^/(?<ip>[0-9\.]+)([^/]*)/(?<port>[0-9]{5})/$" {
          proxy_pass http://$ip:$port/;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection $connection_upgrade;
          proxy_set_header X-Forwarded-For $remote_addr;
          proxy_set_header X-Real-IP $remote_addr;
        }

        location /s/image/ {
          proxy_pass http://stf_storage_image;
        }

        location /s/apk/ {
          proxy_pass http://stf_storage_apk;
        }

        location /s/ {
          client_max_body_size 1024m;
          client_body_buffer_size 128k;
          proxy_pass http://stf_storage;
        }

        location /socket.io/ {
          proxy_pass http://stf_websocket;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection $connection_upgrade;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Real-IP $http_x_real_ip;
        }

        location /auth/ {
          proxy_pass http://stf_auth/auth/;
        }

        location /api/ {
          proxy_pass http://stf_api/api/;
        }

        location / {
          proxy_pass http://stf_app;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Real-IP $http_x_real_ip;
        }
      }
    }

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ template "fullname" . }}-telegraf-config"
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
data:
  telegraf.conf: |+
    {{- if .Values.telegraf.config.global_tags }}
    [global_tags]
      {{- range $key, $val := .Values.telegraf.config.global_tags }}
      {{ $key }} = {{ $val | quote }}
      {{- end }}
    {{- end }}
    [agent]
      interval = {{ .Values.telegraf.config.agent.interval | quote }}
      round_interval = {{ .Values.telegraf.config.agent.round_interval }}
      metric_buffer_limit = {{ .Values.telegraf.config.agent.metric_buffer_limit }}
      collection_jitter = {{ .Values.telegraf.config.agent.collection_jitter | quote }}
      flush_interval = {{ .Values.telegraf.config.agent.flush_interval | quote }}
      flush_jitter = {{ .Values.telegraf.config.agent.flush_jitter | quote }}
      precision = ""
      debug = true
      quiet = false
      logfile = ""
      hostname = "$HOST_IP"
      omit_hostname = false
    [[inputs.exec]]
      commands = ["cat /custom-metrics/devices"]
      data_format = "influx"
    [[inputs.exec]]
      commands = ["cat /custom-metrics/battery"]
      data_format = "influx"
    {{- if .Values.telegraf.config.outputs.graphite.enabled }}
    [[outputs.graphite]]
      servers = [{{ .Values.telegraf.config.outputs.graphite.server | quote }}]
      prefix = {{ .Values.telegraf.config.outputs.graphite.prefix | quote }}
      template = {{ .Values.telegraf.config.outputs.graphite.template | quote }}
      timeout = {{ .Values.telegraf.config.outputs.graphite.timeout }}
    {{- end }}
    {{- if .Values.telegraf.config.outputs.prometheus.enabled }}
    [[outputs.prometheus_client]]
      listen = ":9273"
      expiration_interval = "60s"
      collectors_exclude = ["gocollector", "process"]
    {{- end }}
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ template "fullname" . }}-telegraf-openstf-config"
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
data:
  crontab: |+
    * * * * * /bin/bash /scripts/metrics.sh > /custom-metrics/openstf
  metrics.sh: |+
    #!/usr/bin/env bash

    json_filter="openstf"

    declare -A metrics
    metrics['abi']=''
    metrics['battery.health']=''
    metrics['manufacturer']='string'
    metrics['model']='string'
    metrics['network.connected']='boolean'
    metrics['network.type']=''
    metrics['notes']='string'
    metrics['phone.imei']='string'
    metrics['present']='boolean'
    metrics['product']='string'
    metrics['ready']='boolean'
    metrics['remoteConnect']='boolean'
    metrics['serial']='string'
    metrics['sdk']='int'
    metrics['version']='string'
    metrics['using']='boolean'

    for metric in "${!metrics[@]}"
    do
      type="${metrics[$metric]}"
      metric_tag=$(echo "$metric" | sed -r 's/\./-/g')
      case $type in
      string)
        json_filter="$json_filter,${metric_tag,,}=\\\"\(.$metric)\\\""
        ;;
      *)
        json_filter="$json_filter,${metric_tag,,}=\(.$metric)"
        ;;
      esac
    done

    q=".devices[] | \"$json_filter status=\(.status)\""

    curl -s -H "Authorization: Bearer $STF_TOKEN" $STF_URL | jq -r "$q" > /tmp/stf.json

    while read line; do
      echo $line | rev | sed -r 's/ / \\/2g' | rev | awk '{print $0, systime()}'
    done < /tmp/stf.json
  telegraf.conf: |+
    {{- if .Values.telegraf.config.global_tags }}
    [global_tags]
      {{- range $key, $val := .Values.telegraf.config.global_tags }}
      {{ $key }} = {{ $val | quote }}
      {{- end }}
    {{- end }}
    [agent]
      interval = {{ .Values.telegraf.config.agent.interval | quote }}
      round_interval = {{ .Values.telegraf.config.agent.round_interval }}
      metric_buffer_limit = {{ .Values.telegraf.config.agent.metric_buffer_limit }}
      collection_jitter = {{ .Values.telegraf.config.agent.collection_jitter | quote }}
      flush_interval = {{ .Values.telegraf.config.agent.flush_interval | quote }}
      flush_jitter = {{ .Values.telegraf.config.agent.flush_jitter | quote }}
      precision = ""
      debug = true
      quiet = false
      logfile = ""
      omit_hostname = true
    [[inputs.exec]]
      commands = ["cat /custom-metrics/openstf"]
      data_format = "influx"
    {{- if .Values.telegraf.config.outputs.graphite.enabled }}
    [[outputs.graphite]]
      servers = [{{ .Values.telegraf.config.outputs.graphite.server | quote }}]
      prefix = {{ .Values.telegraf.config.outputs.graphite.prefix | quote }}
      template = {{ .Values.telegraf.config.outputs.graphite.template | quote }}
      timeout = {{ .Values.telegraf.config.outputs.graphite.timeout }}
    {{- end }}
    {{- if .Values.telegraf.config.outputs.prometheus.enabled }}
    [[outputs.prometheus_client]]
      listen = ":9273"
      expiration_interval = "60s"
      collectors_exclude = ["gocollector", "process"]
    {{- end }}
